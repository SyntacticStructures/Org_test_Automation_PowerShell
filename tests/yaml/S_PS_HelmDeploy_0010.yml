template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_PS_HelmDeploy_BuildInfo_0010
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory
      buildName: helmbuild
      buildNumber: 1

  - name: S_PS_HelmDeploy_GitRepo_0010
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation.path }}
      branches:
        include: master

  - name: S_PS_HelmDeploy_ReleaseBundle_0010
    type: ReleaseBundle
    configuration:
      sourceDistribution: s_distribution
      name: name
      version: '1'

pipelines:
  - name: S_PS_HelmDeploy_0010
    configuration:
      environmentVariables:
        readOnly:
          release_name_from_repo: "simplehelm-from-repo-${run_id}"
          k8s_namespace: "pipe-master-pool"
      nodePool: win_2019
    steps:
      - name: S_PS_HelmDeploy_0010_create_build
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputResources:
            - name: S_PS_HelmDeploy_GitRepo_0010
          outputResources:
            - name: S_PS_HelmDeploy_BuildInfo_0010
        execution:
          onExecute:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
            - jfrog --version
            - cd $res_S_PS_HelmDeploy_GitRepo_0010_resourcePath/tests/core/helmdeploy
            - jfrog rt u simplehelm-0.3.0.tgz "simplecharts/S_PS_HelmDeploy_0010/"
            - jfrog rt bce $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER
            - jfrog rt bp $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER
            - write_output S_PS_HelmDeploy_BuildInfo_0010 buildName=$JFROG_CLI_BUILD_NAME buildNumber=$JFROG_CLI_BUILD_NUMBER

      - name: Create_Bundle
        type: CreateReleaseBundle
        configuration:
          integrations:
            - name: s_artifactory
          releaseBundleName: S_PS_HelmDeploy_BuildInfo_0010_bundle
          releaseBundleVersion: ${run_id}
          dryRun: false
          sign: true
          inputResources:
            - name: S_PS_HelmDeploy_BuildInfo_0010
          outputResources:
            - name: S_PS_HelmDeploy_ReleaseBundle_0010

      - name: deploy_helm_chart_from_helm_repo
        type: HelmDeploy
        configuration:
          integrations:
            - name: s_artifactory
            - name: s_kubernetes
          inputResources:
            - name: S_PS_HelmDeploy_ReleaseBundle_0010
          helmVersion: 3
          releaseName: ${release_name_from_repo}
          chartPath: simplecharts/S_PS_HelmDeploy_0010
          chartName: simplehelm
          chartVersion: 0.3.0
          flags: "--force --wait --timeout 900s --set image.repository=trriplejay/simplehelm --set image.tag=latest"
          valueFilePaths:
            - values.yaml
          lint: true
          lintFlags: "--strict"
          test: true
        execution:
          onComplete:
            - Write-Output "Deleting distribution..."
            - |
              $distributionUrl = $res_S_PS_HelmDeploy_ReleaseBundle_0010_sourceDistribution_url
              $encoded_auth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${res_S_PS_HelmDeploy_ReleaseBundle_0010_sourceDistribution_user}:${res_S_PS_HelmDeploy_ReleaseBundle_0010_sourceDistribution_apikey}"))
              $releaseBundleName = (find_resource_variable "S_PS_HelmDeploy_ReleaseBundle_0010" name)
              $releaseBundleVersion = (find_resource_variable "S_PS_HelmDeploy_ReleaseBundle_0010" version)
              Write-Output "releaseBundleName = $releaseBundleName"
              Write-Output "releaseBundleVersion = $releaseBundleVersion"
              check_no_verify_ssl
              $headers = @{'Authorization' = "Basic $encoded_auth"}
              $Response = Invoke-WebRequest "${distributionUrl}/api/v1/release_bundle/$releaseBundleName/$releaseBundleVersion" -Method Delete -Headers $headers -TimeoutSec 60 -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
              $statusCode = ""
              try {
                $statusCode = $Response.StatusCode
              }
              catch {
                $statusCode = $_.Exception.Response.StatusCode.value__
              }
              if ($statusCode -eq 204) {
                Write-Output "Deleted release bundle ${releaseBundleName}/${releaseBundleVersion} successfully"
              } else {
                Write-Output "Distribution returned $statusCode"
              }
            - try { helm3 delete simplehelm-from-repo-$run_id --namespace $k8s_namespace } catch {}
            - try { kubectl delete pod --namespace ${k8s_namespace} simplehelm-from-repo-$run_id-test-connection } catch {}
